(*pp ocaml+twt*)

open Printf
open Scanf
open Filename
open Unix
module H = Hashtbl
module S = Hashset

(* Read and parse information from the analysis *)

(* File format:
   source-file-name line-no expression DEF/USE

   We have two Hashtables, one for defined and one for used:
   (source-file-name, line-no) -> expression

   source-file-name generated by CSurf is absolute path, so we need to expand the file name given by CIL.
*)
type key = string * int
type value = string

(* Treat the analysis information as an abstract data *)
let use_info : (key, value) H.t = H.create 255
let define_info : (key, value) H.t = H.create 255

let glob_set: string S.t = S.create 255

let input = "analysis.txt"
let globals = "globals.txt"

(* Parse input into analysis_info *)
(* TODO: Extend the analysis info with function name, so that functions with no interesting stuff can be skipped *)
let _ =
  let ch = open_in input
  let receiver fn ln exp du =
    match du with
      | 'D' -> H.add define_info (fn,ln) exp
      | 'U' -> H.add use_info (fn,ln) exp
  try
    while true do
      fscanf ch "%s %u %s %c\n" receiver
  with
    | End_of_file -> close_in ch

let _ =
  let ch = open_in globals
  let receiver g = S.add glob_set g
  try
    while true do
      fscanf ch "%s\n" receiver
  with
    | End_of_file -> close_in ch

(* Print out analysis_info for debugging *)
(* let debug () = *)
(*   let f (fn,ln) (exp,du) = print_endline fn *)
(*   H.iter f analysis_info *)

(* TODO: fn beginning with "./" or "../" not supported *)
let expand fn = if is_relative fn then concat (getcwd ()) fn else fn

let lookup_define (fn,ln) = H.find_all define_info (expand fn, ln)
let lookup_use (fn,ln) = H.find_all use_info (expand fn, ln)

let is_glob_critical = S.mem glob_set
